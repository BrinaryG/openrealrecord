// This file is auto generated by the protocol-buffers cli tool

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Checkpoint = exports.Checkpoint = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineCheckpoint()

function defineCheckpoint () {
  var enc = [
    encodings.varint,
    encodings.bytes
  ]

  Checkpoint.encodingLength = encodingLength
  Checkpoint.encode = encode
  Checkpoint.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.length)) throw new Error("length is required")
    var len = enc[0].encodingLength(obj.length)
    length += 1 + len
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    var len = enc[0].encodingLength(obj.byteLength)
    length += 1 + len
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    var len = enc[1].encodingLength(obj.rootsHash)
    length += 1 + len
    if (defined(obj.instant)) {
      var len = enc[1].encodingLength(obj.instant)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.length)) throw new Error("length is required")
    buf[offset++] = 8
    enc[0].encode(obj.length, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    buf[offset++] = 16
    enc[0].encode(obj.byteLength, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.rootsHash)) throw new Error("rootsHash is required")
    buf[offset++] = 26
    enc[1].encode(obj.rootsHash, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.instant)) {
      buf[offset++] = 34
      enc[1].encode(obj.instant, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      length: 0,
      byteLength: 0,
      rootsHash: null,
      instant: null
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.length = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.byteLength = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found1 = true
        break
        case 3:
        obj.rootsHash = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 4:
        obj.instant = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
